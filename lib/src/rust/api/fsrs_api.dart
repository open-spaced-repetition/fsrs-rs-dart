// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:collection/collection.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `clone`, `clone`, `clone`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`

F32Array19 get defaultParameters =>
    RustLib.instance.api.crateApiFsrsApiDefaultParameters();

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FSRS>>
abstract class Fsrs implements RustOpaqueInterface {
  Float32List benchmark({required List<FsrsItem> trainSet});

  Float32List computeParameters({required List<FsrsItem> trainSet});

  MemoryState memoryState({required FsrsItem item, MemoryState? startingState});

  MemoryState memoryStateFromSm2(
      {required double easeFactor,
      required double interval,
      required double sm2Retention});

  factory Fsrs({required List<double> parameters}) =>
      RustLib.instance.api.crateApiFsrsApiFsrsNew(parameters: parameters);

  NextStates nextStates(
      {MemoryState? currentMemoryState,
      required double desiredRetention,
      required int daysElapsed});

  String toString();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FSRSItem>>
abstract class FsrsItem implements RustOpaqueInterface {
  List<FsrsReview> get reviews;

  BigInt get longTermReviewCnt;

  factory FsrsItem({required List<FsrsReview> reviews}) =>
      RustLib.instance.api.crateApiFsrsApiFsrsItemNew(reviews: reviews);

  void setReviews({required List<FsrsReview> other});

  String toString();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FSRSReview>>
abstract class FsrsReview implements RustOpaqueInterface {
  factory FsrsReview({required int rating, required int deltaT}) =>
      RustLib.instance.api
          .crateApiFsrsApiFsrsReviewNew(rating: rating, deltaT: deltaT);

  String toString();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ItemState>>
abstract class ItemState implements RustOpaqueInterface {
  double get interval;

  MemoryState get memory;

  String toString();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MemoryState>>
abstract class MemoryState implements RustOpaqueInterface {
  factory MemoryState(
          {required double stability, required double difficulty}) =>
      RustLib.instance.api.crateApiFsrsApiMemoryStateNew(
          stability: stability, difficulty: difficulty);

  String toString();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<NextStates>>
abstract class NextStates implements RustOpaqueInterface {
  ItemState get again;

  ItemState get easy;

  ItemState get good;

  ItemState get hard;

  String toString();
}

class F32Array19 extends NonGrowableListView<double> {
  static const arraySize = 19;

  @internal
  Float32List get inner => _inner;
  final Float32List _inner;

  F32Array19(this._inner)
      : assert(_inner.length == arraySize),
        super(_inner);

  F32Array19.init() : this(Float32List(arraySize));
}
