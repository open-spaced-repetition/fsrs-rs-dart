name: Cross-Platform Build

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            target_suffix: x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            target_suffix: aarch64
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            target_suffix: armv7
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            target_suffix: win_x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            target_suffix: macos_x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            target_suffix: macos_aarch64


    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            rust/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}-${{ matrix.target }} # Include target in cache key
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross --force

      - name: rustup target add x86_64-apple-darwin
        if: matrix.target == 'x86_64-apple-darwin'
        run: rustup target add x86_64-apple-darwin

      - name: Build on linux
        if: runner.os == 'Linux'
        run: |
          cd rust
          cross build --release --target ${{ matrix.target }}
      - name: Build
        if: runner.os != 'Linux'
        run: |
          cd rust
          cargo build --release --target ${{ matrix.target }}


      - name: Upload build artifact (per platform)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }} # Unique artifact name!
          path: rust/target/${{ matrix.target }}/release/*fsrs*

  #Linux的workflow用来整合所有的二进制文件
  combine-artifacts:
      needs: build
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v3
        - name: create release dir
          run: |
            cd rust
            mkdir -p target/release/

        - name: Download all artifacts
          uses: actions/download-artifact@v4
          with:
            path: artifacts #下载到artifacts文件夹

        - name: Move artifacts to release
          run: |
            cp -av ./artifacts/* rust/target/release/
            find rust -name "*.a" -print -delete
            find rust -name "*.d" -print -delete
            find rust -name "*.pdb" -print -delete
            find rust -name "*.exp" -print -delete
            find rust -name "*.lib" -print -delete

        - name: Show Result
          run: |
            cd rust
            ls -R .
        - name: Upload combined build artifacts
          uses: actions/upload-artifact@v4
          with:
              name: combined-release
              path: rust/target/release/
