name: Cross-Platform Build

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu  # Common x86-64 Linux
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu # ARM64 (common on Raspberry Pi, AWS Graviton, etc.)
          # need https://stackoverflow.com/questions/56195677/how-to-cross-compile-rust-code-for-the-raspberry-pi-zero-w but ignore it first
          # - os: ubuntu-latest
          #  target: armv7-unknown-linux-gnueabihf  # ARMv7 (32-bit, often for older Raspberry Pi)
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin #For apple silicon


    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            rust/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}-${{ matrix.target }} # Include target in cache key
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install target
        if: runner.os == 'Linux' # Only necessary on Linux, macOS and Windows have built in support
        run: rustup target add ${{ matrix.target }}

      - name: Build
        run: |
          cd rust
          cargo build --release --target ${{ matrix.target }}

      - name: Upload build artifact (per platform)
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}-${{ matrix.target }} # Unique artifact name!
          path: bindings/dart/rust/target/${{ matrix.target }}/release/*fsrs*

  #Linux的workflow用来整合所有的二进制文件
  combine-artifacts:
      needs: build
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v3
        - name: create release dir
          run: |
            cd rust
            mkdir -p target/release/

        - name: Download all artifacts
          uses: actions/download-artifact@v4
          with:
            path: artifacts #下载到artifacts文件夹

        - name: Move artifacts to release
          run: |
            cp -av ./artifacts/* rust/target/release/
        - name: Show Result
          run: |
            cd rust
            ls -R .
        - name: Upload combined build artifacts
          uses: actions/upload-artifact@v4
          with:
              name: combined-release
              path: rust/target/release/
